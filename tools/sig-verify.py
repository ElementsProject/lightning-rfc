#! /usr/bin/python3
# This script verifies hashes from keys, using
# ECDSA over the SECP256k1 curve

# Released by Lisa Neigut under CC0:
# https://creativecommons.org/publicdomain/zero/1.0/

import ecdsa

from ecdsa import SECP256k1, SigningKey
from ecdsa.keys import BadSignatureError
from ecdsa.util import sigdecode_der, sigencode_der


def generate(privkey, hash_digest):
    """
        Given a private key scalar and hash_digest,
        returns a valid signature.

        inputs:
        privkey: a hex-string private key scalar
        hash_digest: a hex-string hash message

        returns:
        (r,s): tuple of hex-string encoded integer values
    """
    secret = int(privkey, 16)
    key = SigningKey.from_secret_exponent(secret, curve=SECP256k1)
    digest = bytes.fromhex(hash_digest)
    sig = key.sign_digest(digest, sigencode=sigencode_der)
    r_int, s_int = sigdecode_der(sig, SECP256k1.generator.order())
    return hex(r_int)[2:], hex(s_int)[2:]


def verify(privkey, hash_digest, sig):
    """
        Verify that the given signature was in fact
        generated by the given private key for the
        given hash_digest

        inputs:
        - privkey: a hex-string private key scalar
        - hash_digest: a hex-string hash message
        - sig: a byte-array of concatenated r + s values of the signature to verify

        returns:
        - True if valid signature,
        - False otherwise
    """
    secret = int(privkey, 16)
    key = SigningKey.from_secret_exponent(secret, curve=SECP256k1)
    pubkey = key.get_verifying_key()
    digest = bytes.fromhex(hash_digest)

    if len(sig) < 64 or len(sig) > 66:
        raise ValueError("Expected a 64-byte array for sig, got {} ({})".format(len(sig), sig.hex()))

    r = int.from_bytes(sig[:32], byteorder='big', signed=False)
    s = int.from_bytes(sig[32:], byteorder='big', signed=False)
    der_sig = sigencode_der(r, s, SECP256k1.generator.order())
    try:
        return pubkey.verify_digest(der_sig, digest, sigdecode=sigdecode_der)
    except ecdsa.keys.BadSignatureError:
        return False
